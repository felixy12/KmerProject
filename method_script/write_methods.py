'''
Writes output file for the weights of important words generated by GkmerWeights and
FilterTopGkmers methods.
outFileName:	The desired directory+name of the output file.
importantWords:	The list of important words, as generated by FilterTopGkmers.
weightDict:		The dictionary that contains the weights for all gkmers, not including
				reverse complements. This is the output from GkmerWeights.
'''
def writeGkmerWeights(outFileName, importantWords, weightDict):
    wordsFile = open(outFileName, 'w')
    Keys = importantWords.keys()
    Keys.sort()
    for word in Keys:
        wordsFile.write(word+"\t"+str(weightDict.get(word))+"\n")
    wordsFile.close()

'''
Writes output file for the feature matrix generated by ftMat.
Inputs:
outFileName:	The desired directory+name of the output file.
ftMat:			The output matrix from the ftMat method, containing sequences on the rows
				and important gkmer counts on the columns.
seqNameList:	A list that contains the names of all of the sequences corresponding
				to the rows in ftMat. This indices in this list must correspond to the
				row the position weights are created for in the ftMat matrix.
'''
def writeFtMat(outFileName, ftMat, seqNameList):
    ftFile = open(outFileName, 'w')
    for seqInd in range(len(seqNameList)):
        ftFile.write(seqNameList[seqInd])
        for i in range(ftMat.shape[1]):
            ftFile.write("\t"+str(ftMat[seqInd,i]))
        ftFile.write("\n")
    ftFile.close()

'''
Writes output file for the list generated from generateLmerWeights method.
Inputs:
outFileName:	The desired directory+name of the output file.
weightList:		A list that contains the tuples with all of the Lmers and their weights,
				sorted by the highest weight first.
'''
def writeLmerWeights(outFileName, weightList):
    outFile = open(outFileName,'w')
    print("Writing results to file.")
    for tup in weightList:
        outFile.write(tup[0]+'\t'+str(tup[1])+'\n')
    outFile.close()
        
'''
Writes output file for the matrix generated from positionWeights method.
Inputs:
outFileName:	The desired directory+name of the output file.
PW:				The output matrix from the positionWeights method.
seqNameList:	A list that contains the names of all of the sequences corresponding
				to the rows in PW. This indices in this list must correspond to the
				row the position weights are created for in the PW matrix.
'''
def writePW(outFileName, PW, seqNameList):
    print('Writing PW matrix to output file.')
    outFile = open(outFileName, 'w')
    for i in range(PW.shape[0]):
        row = seqNameList[i]+'\t'
        for j in range(PW.shape[1]):
            row = row+str(PW[i,j])+'\t'
        outFile.write(row.strip()+'\n')
    print('Done writing. File can be found in ' + outFileName)
    outFile.close()

'''
Writes output file for the list generated from generateLmerWeights method.
Inputs:
outFileName:	The desired directory+name of the output file.
lmerCountList:	A list that contains the tuples with all of the Lmers and the number
				of times that lmer appeared in the sequence list, sorted by the highest
				weight first.
'''
def writeLmerCounts(outFileName, lmerCountList):
    outputFile = open(outFileName,'w')
    for kmer in kmerOrder:
        outputFile.write(kmer+'\t'+str(kmerCountDict[kmer])+'\n')
    outputFile.close()
