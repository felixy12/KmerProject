Method of producing l-mer weights

l denotes total length of the word, k denotes number of non-gap letters in word.

Inputs:	Positive fasta file
		Negative fasta file

1st step: 	Generating support vectors and alpha values
			Run gkm-svm with the input files. Output should have sv_seq.fa, sv_alpha.out.
			Output:
				sv_seq.fa:		contains the sequences that act as support vectors.
				sv_alpha.out:	contains the alpha values for it's respective vector. 
				NOTE: sv_alpha.out also includes the sign of each sequence (+ or -)
			
2nd step:	Generate gapped k-mer weights
			Form a dictionary, where the gapped k-mer is the key, weight is the value.
			For each sequence in sv_seq, count all gapped k-mers generated by the
			sequence. Normalize the counts so that they add up to one, then multiply
			each normalized count by the alpha for that sequence. This is the weight 
			contribution for each gapped k-mer by that specific sequence. Add these 
			contributions into the weights.
			After exhausting all sequences, go through the dictionary and consolidate 
			all reverse complements. For example, the weight for AAAAAA---- would get 
			added to the weight for ----TTTTTT, and AAAAAA---- gets deleted from the
			dictionary. This means that the reverse complement that comes first 
			alphabetically is the one that is kept.
			Finally, z-scores for all gapped k-mer weights are calculated, and if the
			z-score exceeds a certain threshold (2 in our case), we write the the
			gapped k-mer and it's weight to an output file.
			Output:
				gkmer_weights.out:	Contains weights for gapped k-mers that exceed 
									a certain threshold.
			
3rd step:	Generate l-mer weights
			Create a dictionary containing all possible k-mers.
			For each l-mer, extract all possible gapped k-mers that can come from this
			l-mer (including reverse complementary strands). Add up all of the weights
			for each of the k-mers. This means that reverse complement l-mers should have
			the same weight, since they produce the same set of gapped k-mers.
			Output:
				lmer_weights.out:	Contains weights for l-mers that consist of adding
									together all gapped k-mer weights
									
4th step:	Generating weights per position in sequence
			Each sequence can be broken down to L-l+1 l-mers, where 
				L is the length of the sequence
				l is the length of the l-mer
			Assign each position the weight of the l-mer at that position.
			